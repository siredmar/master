1. Introduction
===============
	This text document will brief the procedure for building various targets for EA31XX platform. There are 4 possible targets that you can build the binaries for. They are
	I.   default
	II.  cache
	III. sdram
	IV.  sdram_cache

IMPORTANT NOTE: When switching from iram target to sdram target or vice versa, use "make clean" to remove the existing objects.
For selection of targets in Keil projects, please refer to ea3131_build_keil_targets.doc 

2. Target - default
===================
Build Command      : make
Load Memory Device : IRAM (Internal SRAM)
Load Address       : 0x11029000
Execute Address    : 0x11029000

The default target will generate an image which will run from uncached SRAM area. I-Cache is enabled by default, the region of execution is not be cached by D-Cache.

3. Target - cache
=================
Build Command      : make cache
Load Memory Device : IRAM (Internal SRAM)
Load Address       : 0x11029000
Execute Address    : 0x11129000

This target will generate files (binary, map etc.) with _cache suffix. Executables generated with this target will have both I and D-Caches enabled. Code that make use of DMA must take care of cache coherency. (See ea31xx_cache_coherency.txt)

4. Target - sdram
=================
Build Command      : make sdram
Load Memory Device : SDRAM (External Memory)
Load Address       : 0x31000000
Execute Address    : 0x31000000

This target will generate binaries that can be loaded on to SDRAM using any bootloaders like (u-boot, apex etc.,). For more details on how to load and execute image from u-boot see section 6 of this document. Code that will not fit into smaller memory like Internal SRAM can be built for SDRAM using this target.

5. Target - sdram_cache
=======================
Build Command      : make sdram_cache
Load Memory Device : SDRAM (External Memory)
Load Address       : 0x31000000
Execute Address    : 0x41000000

This target will generate files (binary, map etc.) with _cache suffix. Executables generated with this target will have both I and D-Caches enabled. Code that make use of DMA must take care of cache coherency (See ea31xx_cache_coherency.txt). Binaries generated using this target must be loaded on to external SDRAM using any of the existing boot loaders (Example u-boot, apex, etc.,)

6. Loading SDRAM binaries using u-boot
======================================
To know how to load and run u-boot in lpc31xx targets refer to the url (http://www.lpclinux.com/LPC313x/LPC313xUboot). Once you get the u-boot prompt follow the steps given below to load and run binaries generated by sdram or sdram_cache targets.

6.1: Step 1: Make sure the load address is OK
---------------------------------------------
Using command "printenv loadaddr" in u-boot prompt, check if  "loadaddr=0x31000000". If u-boot responds with an Error or if the address set is not "0x31000000". Then using "setenv loadaddr 0x31000000", set the environment. The newly set loadaddr can be verified using "printenv" command.

6.2: Step 2: Loading image to memory
------------------------------------
There exists many ways to load an image onto memory using u-boot. Some of them are given below for the full set of load options see u-boot manual.

6.2.1: Loading image using network
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
If  the board connected is to a network with dhcp server, then use "dhcp [server ipaddr]:filename". Wait for the u-boot to load the file onto memory.
If you don't have DHCP then use "tftpboot ServerIPaddress:FileName" to fetch the image from tftp server.

6.2.2: Load image using UART
~~~~~~~~~~~~~~~~~~~~~~~~~~~~
In u-boot binaries can be loaded via UART using "kermit" protocol or "ymodem" protocol. To use kermit protocol type the command "loadb" at u-boot command prompt, then using any terminal emulation program like hyperterminal or teraterm send the file to u-boot using "kermit" send option provided by the terminal program. To use "ymodem" protocol use command "loady", then send the file from terminal program.

6.3: Step 3: Start the program
------------------------------
Using command "go $(loadaddr)" at u-boot prompt the execution of the loaded application can be started. Note that this command is same even for sdram_cache target.
