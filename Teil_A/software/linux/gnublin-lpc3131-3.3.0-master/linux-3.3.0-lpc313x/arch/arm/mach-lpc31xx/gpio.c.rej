--- arch/arm/mach-lpc31xx/gpio.c	2012-08-21 22:55:26.133612465 +0200
+++ arch/arm/mach-lpc31xx/gpio.c	2012-09-22 13:41:20.239126472 +0200
@@ -1,9 +1,7 @@
-/*  linux/arch/arm/mach-lpc313x/gpio.c
+/*
+ * Copyright (c) 2012 Hans-Frieder Vogt <hfvogt@gmx.net>
  *
- *  Author:	Durgesh Pattamatta
- *  Copyright (C) 2009 NXP semiconductors
- *
- * GPIO driver for LPC313x & LPC315x.
+ * GPIO device for LPC313x & LPC315x.
  *
  * This program is free software; you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by
@@ -21,115 +19,26 @@
  *
  */
 #include <linux/platform_device.h>
-#include <linux/init.h>
 #include <linux/kernel.h>
-#include <linux/module.h>
 #include <linux/string.h>
 
-#include <asm/errno.h>
 #include <mach/hardware.h>
-#include <mach/gpio.h>
-
-
-void lpx313x_gpio_func_mode(int gpio)
-{
-	unsigned long flags;
-	int port = (gpio & GPIO_PORT_MASK);
-	int pin = 1 << (gpio & GPIO_PIN_MASK);
 
-	raw_local_irq_save(flags);
-
-	GPIO_M1_RESET(port) = pin; 
-	GPIO_M0_SET(port) = pin;
-
-	raw_local_irq_restore(flags);
+static struct resource gpio_resource[] = {
+	[0] = {
+		.start	= GPIO_PHYS,
+		.end	= GPIO_PHYS + SZ_4K - 1,
+		.flags	= IORESOURCE_MEM,
+	},
+};
+
+struct platform_device lpc313x_gpio_device = {
+	.name		= "lpc313x-gpio",
+	.id		= -1,
+	.resource	= gpio_resource,
+	.num_resources	= ARRAY_SIZE(gpio_resource),
+};
 
+int __init lpc313x_gpio_dev_init(void) {
+	return platform_device_register(&lpc313x_gpio_device);
 }
-
-EXPORT_SYMBOL(lpx313x_gpio_func_mode);
-
-
-
-
-int lpc313x_gpio_direction_output(unsigned gpio, int value)
-{
-	unsigned long flags;
-	int port = (gpio & GPIO_PORT_MASK);
-	int pin = 1 << (gpio & GPIO_PIN_MASK);
-
-	raw_local_irq_save(flags);
-
-	GPIO_M1_SET(port) = pin; 
-
-	if(value) {
-		GPIO_M0_SET(port) = pin;
-	} else {
-		GPIO_M0_RESET(port) = pin;
-	}
-
-	raw_local_irq_restore(flags);
-	return 0;
-}
-
-EXPORT_SYMBOL(lpc313x_gpio_direction_output);
-
-
-#ifndef CONFIG_GPIOLIB
-int gpio_is_valid(unsigned gpio)
-{
-	int ret = 1;
-	int port = (gpio & GPIO_PORT_MASK);
-	int pin_no = (gpio & GPIO_PIN_MASK);
-
-
-	if ( (gpio & ~(GPIO_PORT_MASK | GPIO_PIN_MASK)) &&
-	     ((port >> 5) > 12)) {
-		return 0;
-	} 
-	switch (port) {
-		case IOCONF_EBI_I2STX_0:
-			if (pin_no > 9)
-				ret = 0;
-			break;
-		case IOCONF_PWM:
-		case IOCONF_CGU:
-			if (pin_no > 0)
-				ret = 0;
-			break;
-		case IOCONF_I2SRX_0:
-		case IOCONF_I2SRX_1:
-			if (pin_no > 2)
-				ret = 0;
-			break;
-		case IOCONF_I2STX_1:
-			if (pin_no > 3)
-				ret = 0;
-			break;
-		case IOCONF_EBI:
-			if (pin_no > 15)
-				ret = 0;
-			break;
-		case IOCONF_GPIO:
-			if (pin_no > 14)
-				ret = 0;
-			break;
-		case IOCONF_UART:
-		case IOCONF_I2C1:
-			if (pin_no > 1)
-				ret = 0;
-			break;
-		case IOCONF_SPI:
-			if (pin_no > 4)
-				ret = 0;
-			break;
-		case IOCONF_NAND_CTRL:
-			if (pin_no > 3)
-				ret = 0;
-			break;
-	}
-	return ret;
-}
-
-EXPORT_SYMBOL(gpio_is_valid);
-#endif
-
